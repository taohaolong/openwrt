Index: madwifi-trunk-r3776/ath/if_ath.c
===================================================================
--- madwifi-trunk-r3776.orig/ath/if_ath.c	2008-07-18 20:35:03.000000000 +0200
+++ madwifi-trunk-r3776/ath/if_ath.c	2008-07-18 20:37:47.000000000 +0200
@@ -182,7 +182,11 @@
 	struct sk_buff *, int, int, u_int64_t);
 static void ath_setdefantenna(struct ath_softc *, u_int);
 static struct ath_txq *ath_txq_setup(struct ath_softc *, int, int);
-static void ath_rx_tasklet(TQUEUE_ARG);
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,24)
+static int ath_rx_poll(struct napi_struct *napi, int budget);
+#else
+static int ath_rx_poll(struct net_device *dev, int *budget);
+#endif
 static int ath_hardstart(struct sk_buff *, struct net_device *);
 static int ath_mgtstart(struct ieee80211com *, struct sk_buff *);
 #ifdef ATH_SUPERG_COMP
@@ -331,6 +335,9 @@
 static u_int32_t ath_set_clamped_maxtxpower(struct ath_softc *sc, 
 		u_int32_t new_clamped_maxtxpower);
 
+static void ath_poll_disable(struct net_device *dev);
+static void ath_poll_enable(struct net_device *dev);
+
 static void ath_scanbufs(struct ath_softc *sc);
 static int ath_debug_iwpriv(struct ieee80211com *ic, 
 		unsigned int param, unsigned int value);
@@ -518,7 +525,6 @@
 
 	atomic_set(&sc->sc_txbuf_counter, 0);
 
-	ATH_INIT_TQUEUE(&sc->sc_rxtq,		ath_rx_tasklet,		dev);
 	ATH_INIT_TQUEUE(&sc->sc_txtq,		ath_tx_tasklet,		dev);
 	ATH_INIT_TQUEUE(&sc->sc_bmisstq,	ath_bmiss_tasklet,	dev);
 	ATH_INIT_TQUEUE(&sc->sc_bstucktq,	ath_bstuck_tasklet,	dev);
@@ -833,6 +839,12 @@
 	dev->set_mac_address = ath_set_mac_address;
 	dev->change_mtu = ath_change_mtu;
 	dev->tx_queue_len = ATH_TXBUF - ATH_TXBUF_MGT_RESERVED;
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,24)
+	netif_napi_add(dev, &sc->sc_napi, ath_rx_poll, 64);
+#else
+	dev->poll = ath_rx_poll;
+	dev->weight = 64;
+#endif
 #ifdef USE_HEADERLEN_RESV
 	dev->hard_header_len += sizeof(struct ieee80211_qosframe) +
 				sizeof(struct llc) +
@@ -1770,7 +1782,7 @@
 }
 
 static void
-ath_intr_process_rx_descriptors(struct ath_softc *sc, int *pneedmark, u_int64_t hw_tsf)
+ath_intr_process_rx_descriptors(struct ath_softc *sc, int *pneedmark, u_int64_t hw_tsf, int schedule)
 {
 	struct ath_hal *ah = sc->sc_ah;
 	struct ath_desc *ds;
@@ -2252,8 +2264,25 @@
 	}
 
 	/* If we got something to process, schedule rx queue to handle it */
-	if (count)
-		ATH_SCHEDULE_TQUEUE(&sc->sc_rxtq, pneedmark);
+	if (count) {
+		sc->sc_isr &= ~HAL_INT_RX;
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,24)
+		if (netif_rx_schedule_prep(sc->sc_dev, &sc->sc_napi))
+#else
+		if (netif_rx_schedule_prep(sc->sc_dev))
+#endif
+		{
+#ifndef ATH_PRECISE_TSF
+			sc->sc_imask &= ~HAL_INT_RX;
+			ath_hal_intrset(ah, sc->sc_imask);
+#endif
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,24)
+			__netif_rx_schedule(sc->sc_dev, &sc->sc_napi);
+#else
+			__netif_rx_schedule(sc->sc_dev);
+#endif
+		}
+	}
 	ATH_RXBUF_UNLOCK_IRQ(sc);
 #undef PA2DESC
 }
@@ -2343,6 +2372,7 @@
 		(status & HAL_INT_GLOBAL)	? " HAL_INT_GLOBAL"	: ""
 		);
 
+	sc->sc_isr = status;
 	status &= sc->sc_imask;			/* discard unasked for bits */
 	/* As soon as we know we have a real interrupt we intend to service, 
 	 * we will check to see if we need an initial hardware TSF reading. 
@@ -2400,7 +2430,7 @@
 		}
 		if (status & (HAL_INT_RX | HAL_INT_RXPHY)) {
 			/* NB: Will schedule rx tasklet if necessary. */
-			ath_intr_process_rx_descriptors(sc, &needmark, hw_tsf);
+			ath_intr_process_rx_descriptors(sc, &needmark, hw_tsf, 1);
 		}
 		if (status & HAL_INT_TX) {
 #ifdef ATH_SUPERG_DYNTURBO
@@ -2426,6 +2456,11 @@
 				}
 			}
 #endif
+			/* disable transmit interrupt */
+			sc->sc_isr &= ~HAL_INT_TX;
+			ath_hal_intrset(ah, sc->sc_imask & ~HAL_INT_TX);
+			sc->sc_imask &= ~HAL_INT_TX;
+
 			ATH_SCHEDULE_TQUEUE(&sc->sc_txtq, &needmark);
 		}
 		if (status & HAL_INT_BMISS) {
@@ -2617,6 +2652,7 @@
 	if (sc->sc_tx99 != NULL)
 		sc->sc_tx99->start(sc->sc_tx99);
 #endif
+	ath_poll_enable(dev);
 
 done:
 	ATH_UNLOCK(sc);
@@ -2657,6 +2693,9 @@
 		if (sc->sc_tx99 != NULL)
 			sc->sc_tx99->stop(sc->sc_tx99);
 #endif
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,24)
+		ath_poll_disable(dev);
+#endif
 		netif_stop_queue(dev);	/* XXX re-enabled by ath_newstate */
 		dev->flags &= ~IFF_RUNNING;	/* NB: avoid recursion */
 		ieee80211_stop_running(ic);	/* stop all VAPs */
@@ -4109,6 +4148,43 @@
 	return ath_keyset(sc, k, mac, vap->iv_bss);
 }
 
+static void ath_poll_disable(struct net_device *dev)
+{
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,24)
+	struct ath_softc *sc = dev->priv;
+#endif
+
+	/*
+	 * XXX Using in_softirq is not right since we might
+	 * be called from other soft irq contexts than
+	 * ath_rx_poll
+	 */
+	if (!in_softirq()) {
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,24)
+		napi_disable(&sc->sc_napi);
+#else
+		netif_poll_disable(dev);
+#endif
+	}
+}
+
+static void ath_poll_enable(struct net_device *dev)
+{
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,24)
+	struct ath_softc *sc = dev->priv;
+#endif
+
+	/* NB: see above */
+	if (!in_softirq()) {
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,24)
+		napi_enable(&sc->sc_napi);
+#else
+		netif_poll_enable(dev);
+#endif
+	}
+}
+
+
 /*
  * Block/unblock tx+rx processing while a key change is done.
  * We assume the caller serializes key management operations
@@ -4119,33 +4195,26 @@
 ath_key_update_begin(struct ieee80211vap *vap)
 {
 	struct net_device *dev = vap->iv_ic->ic_dev;
-	struct ath_softc *sc = dev->priv;
 
 	DPRINTF(sc, ATH_DEBUG_KEYCACHE, "Begin\n");
 	/*
 	 * When called from the rx tasklet we cannot use
 	 * tasklet_disable because it will block waiting
 	 * for us to complete execution.
-	 *
-	 * XXX Using in_softirq is not right since we might
-	 * be called from other soft irq contexts than
-	 * ath_rx_tasklet.
 	 */
-	if (!in_softirq())
-		tasklet_disable(&sc->sc_rxtq);
-	netif_stop_queue(dev);
+	if ((dev->flags & (IFF_UP|IFF_RUNNING)) == (IFF_UP|IFF_RUNNING))
+		netif_stop_queue(dev);
 }
 
 static void
 ath_key_update_end(struct ieee80211vap *vap)
 {
 	struct net_device *dev = vap->iv_ic->ic_dev;
-	struct ath_softc *sc = dev->priv;
 
 	DPRINTF(sc, ATH_DEBUG_KEYCACHE, "End\n");
-	netif_wake_queue(dev);
-	if (!in_softirq())		/* NB: see above */
-		tasklet_enable(&sc->sc_rxtq);
+
+	if ((dev->flags & (IFF_UP|IFF_RUNNING)) == (IFF_UP|IFF_RUNNING))
+		netif_wake_queue(dev);
 }
 
 /*
@@ -6405,15 +6474,25 @@
 	sc->sc_numrxotherant = 0;
 }
 
-static void
-ath_rx_tasklet(TQUEUE_ARG data)
+static int
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,24)
+ath_rx_poll(struct napi_struct *napi, int budget)
+#else
+ath_rx_poll(struct net_device *dev, int *budget)
+#endif
 {
 #define	PA2DESC(_sc, _pa) \
 	((struct ath_desc *)((caddr_t)(_sc)->sc_rxdma.dd_desc + \
 		((_pa) - (_sc)->sc_rxdma.dd_desc_paddr)))
-	struct net_device *dev = (struct net_device *)data;
-	struct ath_buf *bf;
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,24)
+	struct ath_softc *sc = container_of(napi, struct ath_softc, sc_napi);
+	struct net_device *dev = sc->sc_dev;
+	u_int rx_limit = budget;
+#else
 	struct ath_softc *sc = dev->priv;
+	u_int rx_limit = min(dev->quota, *budget);
+#endif
+	struct ath_buf *bf;
 	struct ieee80211com *ic = &sc->sc_ic;
 	struct ath_hal *ah = sc ? sc->sc_ah : NULL;
 	struct ath_desc *ds;
@@ -6421,6 +6500,7 @@
 	struct ieee80211_node *ni;
 	struct sk_buff *skb = NULL;
 	unsigned int len, phyerr, mic_fail = 0;
+	unsigned int early_stop = 0;
 	int type = -1; /* undefined */
 	int init_ret = 0;
 	int bf_processed = 0;
@@ -6428,6 +6508,7 @@
 	int errors	 = 0;
 
 	DPRINTF(sc, ATH_DEBUG_RX_PROC, "%s started...\n", __func__);
+process_rx_again:
 	do {
 		/* Get next RX buffer pending processing by RX tasklet...
 		 *  
@@ -6457,6 +6538,10 @@
 			break;
 
 		bf_processed++;
+		if (rx_limit-- < 0) {
+			early_stop = 1;
+			break;
+		}
 		ds  = bf->bf_desc;
 
 #ifdef AR_DEBUG
@@ -6491,6 +6576,7 @@
 				sc->sc_stats.ast_rx_phyerr++;
 				phyerr = rs->rs_phyerr & 0x1f;
 				sc->sc_stats.ast_rx_phy[phyerr]++;
+				goto rx_next;
 			}
 			if (rs->rs_status & HAL_RXERR_DECRYPT) {
 				/* Decrypt error.  If the error occurred
@@ -6689,6 +6775,33 @@
 		STAILQ_INSERT_TAIL(&sc->sc_rxbuf, bf, bf_list);
 		ATH_RXBUF_UNLOCK_IRQ(sc);
 	} while (1);
+	if (!early_stop) {
+		unsigned long flags;
+		/* Check if more data is received while we were
+		 * processing the descriptor chain.
+		 */
+#ifndef ATH_PRECISE_TSF
+		local_irq_save(flags);
+		if (sc->sc_isr & HAL_INT_RX) {
+			u_int64_t hw_tsf = ath_hal_gettsf64(ah);
+			sc->sc_isr &= ~HAL_INT_RX;
+			local_irq_restore(flags);
+			ath_intr_process_rx_descriptors(sc, NULL, hw_tsf, 0);
+			goto process_rx_again;
+		}
+		sc->sc_imask |= HAL_INT_RX;
+		ath_hal_intrset(ah, sc->sc_imask);
+		local_irq_restore(flags);
+#endif
+	}
+
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,24)
+	netif_rx_complete(dev, napi);
+#else
+	netif_rx_complete(dev);
+	*budget -= bf_processed;
+	dev->quota -= bf_processed;
+#endif
 
 	if (sc->sc_useintmit) 
 		ath_hal_rxmonitor(ah, &sc->sc_halstats, &sc->sc_curchan);
@@ -6701,6 +6814,12 @@
 		" %d rx buf processed. %d were errors. %d skb accepted.\n",
 		__func__, bf_processed, errors, skb_accepted);
 #undef PA2DESC
+
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,24)
+	return bf_processed;
+#else
+	return early_stop;
+#endif
 }
 
 #ifdef ATH_SUPERG_XR
@@ -8306,12 +8425,24 @@
 {
 	struct net_device *dev = (struct net_device *)data;
 	struct ath_softc *sc = dev->priv;
+	unsigned long flags;
 
+process_tx_again:
 	if (txqactive(sc->sc_ah, 0))
 		ath_tx_processq(sc, &sc->sc_txq[0]);
 	if (txqactive(sc->sc_ah, sc->sc_cabq->axq_qnum))
 		ath_tx_processq(sc, sc->sc_cabq);
 
+	local_irq_save(flags);
+	if (sc->sc_isr & HAL_INT_TX) {
+		sc->sc_isr &= ~HAL_INT_TX;
+		local_irq_restore(flags);
+		goto process_tx_again;
+	}
+	sc->sc_imask |= HAL_INT_TX;
+	ath_hal_intrset(sc->sc_ah, sc->sc_imask);
+	local_irq_restore(flags);
+
 	netif_wake_queue(dev);
 
 	if (sc->sc_softled)
@@ -8327,7 +8458,9 @@
 {
 	struct net_device *dev = (struct net_device *)data;
 	struct ath_softc *sc = dev->priv;
+	unsigned long flags;
 
+process_tx_again:
 	/*
 	 * Process each active queue.
 	 */
@@ -8357,6 +8490,16 @@
 	if (sc->sc_uapsdq && txqactive(sc->sc_ah, sc->sc_uapsdq->axq_qnum))
 		ath_tx_processq(sc, sc->sc_uapsdq);
 
+	local_irq_save(flags);
+	if (sc->sc_isr & HAL_INT_TX) {
+		sc->sc_isr &= ~HAL_INT_TX;
+		local_irq_restore(flags);
+		goto process_tx_again;
+	}
+	sc->sc_imask |= HAL_INT_TX;
+	ath_hal_intrset(sc->sc_ah, sc->sc_imask);
+	local_irq_restore(flags);
+
 	netif_wake_queue(dev);
 
 	if (sc->sc_softled)
@@ -10322,9 +10465,9 @@
 	dev->mtu = mtu;
 	if ((dev->flags & IFF_RUNNING) && !sc->sc_invalid) {
 		/* NB: the rx buffers may need to be reallocated */
-		tasklet_disable(&sc->sc_rxtq);
+		ath_poll_disable(dev);
 		error = ath_reset(dev);
-		tasklet_enable(&sc->sc_rxtq);
+		ath_poll_enable(dev);
 	}
 	ATH_UNLOCK(sc);
 
Index: madwifi-trunk-r3776/ath/if_athvar.h
===================================================================
--- madwifi-trunk-r3776.orig/ath/if_athvar.h	2008-07-18 20:35:03.000000000 +0200
+++ madwifi-trunk-r3776/ath/if_athvar.h	2008-07-18 20:37:09.000000000 +0200
@@ -56,6 +56,10 @@
 # include	<asm/bitops.h>
 #endif
 
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,0)
+#define irqs_disabled()			0
+#endif
+
 /*
  * Deduce if tasklets are available.  If not then
  * fall back to using the immediate work queue.
@@ -644,6 +648,9 @@
 struct ath_softc {
 	struct ieee80211com sc_ic;		/* NB: must be first */
 	struct net_device *sc_dev;
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,24)
+	struct napi_struct sc_napi;
+#endif
 	void __iomem *sc_iobase;		/* address of the device */
 	struct semaphore sc_lock;		/* dev-level lock */
 	struct net_device_stats	sc_devstats;	/* device statistics */
@@ -756,7 +763,6 @@
 	struct ath_buf *sc_rxbufcur;		/* current rx buffer */
 	u_int32_t *sc_rxlink;			/* link ptr in last RX desc */
 	spinlock_t sc_rxbuflock;
-	struct ATH_TQ_STRUCT sc_rxtq;		/* rx intr tasklet */
 	struct ATH_TQ_STRUCT sc_rxorntq;	/* rxorn intr tasklet */
 	u_int16_t sc_cachelsz;			/* cache line size */
 
@@ -769,6 +775,7 @@
 	u_int sc_txintrperiod;			/* tx interrupt batching */
 	struct ath_txq sc_txq[HAL_NUM_TX_QUEUES];
 	struct ath_txq *sc_ac2q[WME_NUM_AC];	/* WME AC -> h/w qnum */
+	HAL_INT sc_isr;				/* unmasked ISR state */
 	struct ATH_TQ_STRUCT sc_txtq;		/* tx intr tasklet */
 	u_int8_t sc_grppoll_str[GRPPOLL_RATE_STR_LEN];
 	struct ath_descdma sc_bdma;		/* beacon descriptors */
@@ -888,6 +895,8 @@
 #define	ATH_TXBUF_LOCK_CHECK(_sc)
 #endif
 
+#define ATH_DISABLE_INTR		local_irq_disable
+#define ATH_ENABLE_INTR 		local_irq_enable
 
 #define	ATH_RXBUF_LOCK_INIT(_sc)	spin_lock_init(&(_sc)->sc_rxbuflock)
 #define	ATH_RXBUF_LOCK_DESTROY(_sc)
Index: madwifi-trunk-r3776/net80211/ieee80211_skb.c
===================================================================
--- madwifi-trunk-r3776.orig/net80211/ieee80211_skb.c	2008-07-18 20:32:42.000000000 +0200
+++ madwifi-trunk-r3776/net80211/ieee80211_skb.c	2008-07-18 20:35:03.000000000 +0200
@@ -73,7 +73,7 @@
 #undef dev_queue_xmit
 #undef kfree_skb
 #undef kfree_skb_fast
-#undef netif_rx
+#undef netif_receive_skb
 #undef pskb_copy
 #undef skb_clone
 #undef skb_copy
@@ -581,8 +581,8 @@
 		grp, vlan_tag);
 }
 
-int netif_rx_debug(struct sk_buff *skb, const char *func, int line) {
-	return netif_rx(untrack_skb(skb, 0, __func__, __LINE__));
+int netif_receive_skb_debug(struct sk_buff *skb, const char *func, int line) {
+	return netif_receive_skb(untrack_skb(skb, 0, __func__, __LINE__));
 }
 
 struct sk_buff *alloc_skb_debug(unsigned int length, gfp_t gfp_mask,
@@ -707,7 +707,7 @@
 }
 
 EXPORT_SYMBOL(vlan_hwaccel_rx_debug);
-EXPORT_SYMBOL(netif_rx_debug);
+EXPORT_SYMBOL(netif_receive_skb_debug);
 EXPORT_SYMBOL(alloc_skb_debug);
 EXPORT_SYMBOL(dev_alloc_skb_debug);
 EXPORT_SYMBOL(skb_clone_debug);
Index: madwifi-trunk-r3776/net80211/ieee80211_skb.h
===================================================================
--- madwifi-trunk-r3776.orig/net80211/ieee80211_skb.h	2008-07-18 20:32:42.000000000 +0200
+++ madwifi-trunk-r3776/net80211/ieee80211_skb.h	2008-07-18 20:35:03.000000000 +0200
@@ -115,7 +115,7 @@
 
 int vlan_hwaccel_rx_debug(struct sk_buff *skb, struct vlan_group *grp,
 		unsigned short vlan_tag, const char *func, int line);
-int netif_rx_debug(struct sk_buff *skb, const char *func, int line);
+int netif_receive_skb_debug(struct sk_buff *skb, const char *func, int line);
 struct sk_buff *alloc_skb_debug(unsigned int length, gfp_t gfp_mask,
 		const char *func, int line);
 struct sk_buff *dev_alloc_skb_debug(unsigned int length,
@@ -150,7 +150,7 @@
 #undef dev_queue_xmit
 #undef kfree_skb
 #undef kfree_skb_fast
-#undef netif_rx
+#undef netif_receive_skb
 #undef pskb_copy
 #undef skb_clone
 #undef skb_copy
@@ -167,8 +167,8 @@
 	skb_copy_expand_debug(_skb, _newheadroom, _newtailroom, _gfp_mask, __func__, __LINE__)
 #define vlan_hwaccel_rx(_skb, _grp, _tag) \
 	vlan_hwaccel_rx_debug(_skb, _grp, _tag, __func__, __LINE__)
-#define netif_rx(_skb) \
-	netif_rx_debug(_skb, __func__, __LINE__)
+#define netif_receive_skb(_skb) \
+	netif_receive_skb_debug(_skb, __func__, __LINE__)
 #define	alloc_skb(_length, _gfp_mask) \
 	alloc_skb_debug(_length, _gfp_mask, __func__, __LINE__)
 #define	dev_alloc_skb(_length) \
Index: madwifi-trunk-r3776/net80211/ieee80211_input.c
===================================================================
--- madwifi-trunk-r3776.orig/net80211/ieee80211_input.c	2008-07-18 20:32:42.000000000 +0200
+++ madwifi-trunk-r3776/net80211/ieee80211_input.c	2008-07-18 20:37:09.000000000 +0200
@@ -1185,7 +1185,7 @@
 			ret = vlan_hwaccel_rx(skb,
 					vap->iv_vlgrp, ni->ni_vlan);
 		else
-			ret = netif_rx(skb);
+			ret = netif_receive_skb(skb);
 		if (ret == NET_RX_DROP)
 			vap->iv_devstats.rx_dropped++;
 		if (tni != NULL)
@@ -2285,7 +2285,7 @@
 
 		if (SKB_NI(skb1) != NULL)
 			ieee80211_unref_node(&SKB_NI(skb1));
-		if (netif_rx(skb1) == NET_RX_DROP)
+		if (netif_receive_skb(skb1) == NET_RX_DROP)
 			vap->iv_devstats.rx_dropped++;
 	}
 }
Index: madwifi-trunk-r3776/net80211/ieee80211_monitor.c
===================================================================
--- madwifi-trunk-r3776.orig/net80211/ieee80211_monitor.c	2008-07-18 20:32:42.000000000 +0200
+++ madwifi-trunk-r3776/net80211/ieee80211_monitor.c	2008-07-18 20:35:03.000000000 +0200
@@ -580,7 +580,7 @@
 
 			if (SKB_NI(skb1) != NULL)
 				ieee80211_unref_node(&SKB_NI(skb1));
-			if (netif_rx(skb1) == NET_RX_DROP)
+			if (netif_receive_skb(skb1) == NET_RX_DROP)
 				vap->iv_devstats.rx_dropped++;
 			skb1 = NULL;
 		}
