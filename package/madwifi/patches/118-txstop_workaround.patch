diff -ur madwifi.old/ath/if_ath.c madwifi.dev/ath/if_ath.c
--- madwifi.old/ath/if_ath.c	2007-05-15 16:26:02.721036296 +0200
+++ madwifi.dev/ath/if_ath.c	2007-05-20 21:33:53.269103736 +0200
@@ -1711,6 +1711,7 @@
 			} 
 #endif
 			ATH_SCHEDULE_TQUEUE(&sc->sc_txtq, &needmark);
+			sc->sc_tx_start = 0;
 		}
 		if (status & HAL_INT_BMISS) {
 			sc->sc_stats.ast_bmiss++;
@@ -2261,11 +2262,25 @@
 		txq->axq_link = &lastds->ds_link;
 		ath_hal_txstart(ah, txq->axq_qnum);
 		sc->sc_dev->trans_start = jiffies;
+		if ((sc->sc_opmode == HAL_M_IBSS) || (sc->sc_opmode == HAL_M_HOSTAP)) {
+			unsigned long last;
+			last = sc->sc_tx_start;
+			if (last) {
+				if (jiffies > last + 2 * HZ) {
+					printk("%s: Tx queue stuck. Resetting hardware...\n", sc->sc_dev->name);
+					ath_reset(sc->sc_dev);
+					sc->sc_tx_start = 0;
+				}
+			} else {
+				sc->sc_tx_start = jiffies;
+			}
+		}
 	}
 	ATH_TXQ_UNLOCK(txq);
 
 	sc->sc_devstats.tx_packets++;
 	sc->sc_devstats.tx_bytes += framelen;
+	sc->sc_tx_start = 0;
 }
 
 static int 
@@ -7272,7 +7287,7 @@
 		DPRINTF(sc, ATH_DEBUG_UAPSD, "%s: reaping U-APSD txq\n", __func__);
 		uapsdq = 1;
 	}
-
+	
 	for (;;) {
 		if (uapsdq)
 			ATH_TXQ_UAPSDQ_LOCK_IRQ(txq);
diff -ur madwifi.old/ath/if_athvar.h madwifi.dev/ath/if_athvar.h
--- madwifi.old/ath/if_athvar.h	2007-05-04 23:09:29.000000000 +0200
+++ madwifi.dev/ath/if_athvar.h	2007-05-15 16:26:28.911054808 +0200
@@ -689,6 +689,14 @@
 #endif
 	u_int sc_slottimeconf;			/* manual override for slottime */
 	int16_t sc_channoise; 			/* Measured noise of current channel (dBm) */
+
+	/* 
+	 * Several MiniPCI cards and most SoC revs frequently cease all transmission
+	 * when operating in IBSS mode. The reason for this is unknown and could potentially
+	 * be a hardware bug. This variable contains the timestamp of the last successful
+	 * transmission and is checked when enqueueing new frames
+	 */
+	unsigned long sc_tx_start;
 };
 
 typedef void (*ath_callback) (struct ath_softc *);
